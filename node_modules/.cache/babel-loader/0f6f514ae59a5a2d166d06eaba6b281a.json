{"ast":null,"code":"var _jsxFileName = \"/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport { step, click } from './state';\nimport { render } from './renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const initialState = {\n    pos: [{\n      x: 123,\n      y: 123,\n      dx: 4,\n      dy: 4\n    }, {\n      x: 600,\n      y: 600,\n      dx: 4,\n      dy: 4\n    }],\n    size: {\n      height,\n      width\n    }\n  };\n  const ref = useRef();\n  const state = useRef(initialState);\n\n  const iterate = ctx => {\n    state.current = step(state.current);\n    render(ctx)(state.current);\n    requestAnimationFrame(() => iterate(ctx));\n  };\n\n  const onClick = e => {\n    state.current = click(state.current)(e);\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current);\n      ref.current.addEventListener('click', onClick);\n    }\n\n    return () => {\n      ref.current.removeEventListener('click', onClick);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"Gpm0P4FfDB25XYapIJctmdb7SaA=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx"],"names":["useRef","useEffect","step","click","render","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","pos","x","y","dx","dy","size","ref","state","current","onClick","e","addEventListener","removeEventListener"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAAgBC,IAAhB,EAAsBC,KAAtB,QAAmC,SAAnC;AACA,SAASC,MAAT,QAAuB,YAAvB;;;AAEA,MAAMC,UAAU,GACbC,OAAD,IACCC,MAAD,IAA+B;AAC7B,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAI,CAACD,GAAL,EAAU;AACVE,EAAAA,qBAAqB,CAAC,MAAMJ,OAAO,CAACE,GAAD,CAAd,CAArB;AACD,CANH;;AAQA,MAAMG,MAAM,GAAG,QAA0D;AAAA;;AAAA,MAAzD;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAyD;AACvE,QAAMC,YAAmB,GAAG;AAC1BC,IAAAA,GAAG,EAAE,CACH;AAAEC,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,EAAE,EAAE,CAAtB;AAAyBC,MAAAA,EAAE,EAAE;AAA7B,KADG,EAEH;AAAEH,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,EAAE,EAAE,CAAtB;AAAyBC,MAAAA,EAAE,EAAE;AAA7B,KAFG,CADqB;AAK1BC,IAAAA,IAAI,EAAE;AAAER,MAAAA,MAAF;AAAUC,MAAAA;AAAV;AALoB,GAA5B;AAQA,QAAMQ,GAAG,GAAGrB,MAAM,EAAlB;AACA,QAAMsB,KAAK,GAAGtB,MAAM,CAAQc,YAAR,CAApB;;AAEA,QAAMR,OAAO,GAAIE,GAAD,IAAmC;AACjDc,IAAAA,KAAK,CAACC,OAAN,GAAgBrB,IAAI,CAACoB,KAAK,CAACC,OAAP,CAApB;AACAnB,IAAAA,MAAM,CAACI,GAAD,CAAN,CAAYc,KAAK,CAACC,OAAlB;AACAb,IAAAA,qBAAqB,CAAC,MAAMJ,OAAO,CAACE,GAAD,CAAd,CAArB;AACD,GAJD;;AAKA,QAAMgB,OAAO,GAAIC,CAAD,IAAqB;AACnCH,IAAAA,KAAK,CAACC,OAAN,GAAgBpB,KAAK,CAACmB,KAAK,CAACC,OAAP,CAAL,CAAqBE,CAArB,CAAhB;AACD,GAFD;;AAGAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,GAAG,CAACE,OAAR,EAAiB;AACflB,MAAAA,UAAU,CAACC,OAAD,CAAV,CAAoBe,GAAG,CAACE,OAAxB;AACAF,MAAAA,GAAG,CAACE,OAAJ,CAAYG,gBAAZ,CAA6B,OAA7B,EAAsCF,OAAtC;AACD;;AACD,WAAO,MAAM;AACXH,MAAAA,GAAG,CAACE,OAAJ,CAAYI,mBAAZ,CAAgC,OAAhC,EAAyCH,OAAzC;AACD,KAFD;AAGD,GARQ,EAQN,EARM,CAAT;AASA,sBAAO;AAAcZ,IAAAA,MAAd;AAAsBC,IAAAA,KAAtB;AAA6BQ,IAAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA9BD;;GAAMV,M;;KAAAA,M;AAgCN,eAAeA,MAAf","sourcesContent":["import { useRef, useEffect } from 'react'\nimport { State, step, click } from './state'\nimport { render } from './renderer'\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = {\n    pos: [\n      { x: 123, y: 123, dx: 4, dy: 4 },\n      { x: 600, y: 600, dx: 4, dy: 4 },\n    ],\n    size: { height, width },\n  }\n\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    state.current = step(state.current)\n    render(ctx)(state.current)\n    requestAnimationFrame(() => iterate(ctx))\n  }\n  const onClick = (e: PointerEvent) => {\n    state.current = click(state.current)(e)\n  }\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current)\n      ref.current.addEventListener('click', onClick)\n    }\n    return () => {\n      ref.current.removeEventListener('click', onClick)\n    }\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}