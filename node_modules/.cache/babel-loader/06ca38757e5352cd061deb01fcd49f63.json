{"ast":null,"code":"var _jsxFileName = \"/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  const {\n    height,\n    width\n  } = canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\n\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\n\nconst step = state => state;\n\nconst render = ctx => {};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const ref = useRef();\n  useEffect(() => {\n    if (ref.current) initCanvas(ref.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx"],"names":["useRef","useEffect","initCanvas","canvas","ctx","getContext","height","width","fillStyle","fillRect","clear","step","state","render","Canvas","ref","current"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;;AAIA,MAAMC,UAAU,GAAIC,MAAD,IAA+B;AAChD,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAI,CAACD,GAAL,EAAU;AACV,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBJ,MAA1B;AACAC,EAAAA,GAAG,CAACI,SAAJ,GAAgB,OAAhB;AACAJ,EAAAA,GAAG,CAACK,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBF,KAAnB,EAA0BD,MAA1B;AACD,CAND;;AAQA,MAAMI,KAAK,GAAIN,GAAD,IAAmC;AAC/C,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBJ,MAA1B;AACAC,EAAAA,GAAG,CAACI,SAAJ,GAAgB,OAAhB;AACAJ,EAAAA,GAAG,CAACK,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBF,KAAnB,EAA0BD,MAA1B;AACD,CAJD;;AAMA,MAAMK,IAAI,GAAIC,KAAD,IAAkBA,KAA/B;;AAEA,MAAMC,MAAM,GAAIT,GAAD,IAAmC,CAAE,CAApD;;AAEA,MAAMU,MAAM,GAAG,QAA4D;AAAA;;AAAA,MAA3D;AAAER,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAA2D;AACzE,QAAMQ,GAAG,GAAGf,MAAM,EAAlB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,GAAG,CAACC,OAAR,EAAiBd,UAAU,CAACa,GAAG,CAACC,OAAL,CAAV;AAClB,GAFQ,EAEN,EAFM,CAAT;AAGA,sBAAO;AAAcV,IAAAA,MAAd;AAAsBC,IAAAA,KAAtB;AAA6BQ,IAAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAPD;;GAAMD,M;;KAAAA,M;AASN,eAAeA,MAAf","sourcesContent":["import { useRef, useEffect } from 'react'\n\ntype State = { pos: { x: number; y: number } }\n\nconst initCanvas = (canvas: HTMLCanvasElement) => {\n  const ctx = canvas.getContext('2d')\n  if (!ctx) return\n  const { height, width } = canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n\nconst step = (state: State) => state\n\nconst render = (ctx: CanvasRenderingContext2D) => {}\n\nconst Canvas = ({ height, width }: { height?: number; width?: number }) => {\n  const ref = useRef<any>()\n\n  useEffect(() => {\n    if (ref.current) initCanvas(ref.current)\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}