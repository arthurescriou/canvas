{"ast":null,"code":"import{useRef,useEffect}from'react';import{step,click}from'./state';import{render}from'./renderer';import{jsx as _jsx}from\"react/jsx-runtime\";var initCanvas=function initCanvas(iterate){return function(canvas){var ctx=canvas.getContext('2d');if(!ctx)return;requestAnimationFrame(function(){return iterate(ctx);});};};var Canvas=function Canvas(_ref){var height=_ref.height,width=_ref.width;var initialState={pos:[{x:123,y:123,dx:4,dy:4},{x:600,y:600,dx:-4,dy:-4}],size:{height:height,width:width}};var ref=useRef();var state=useRef(initialState);var iterate=function iterate(ctx){state.current=step(state.current);render(ctx)(state.current);requestAnimationFrame(function(){return iterate(ctx);});};var onClick=function onClick(e){state.current=click(state.current)(e);};useEffect(function(){if(ref.current){initCanvas(iterate)(ref.current);ref.current.addEventListener('click',onClick);}return function(){ref.current.removeEventListener('click',onClick);};},[]);return/*#__PURE__*/_jsx(\"canvas\",{height:height,width:width,ref:ref});};export default Canvas;","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx"],"names":["useRef","useEffect","step","click","render","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","pos","x","y","dx","dy","size","ref","state","current","onClick","e","addEventListener","removeEventListener"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,SAAjB,KAAkC,OAAlC,CACA,OAAgBC,IAAhB,CAAsBC,KAAtB,KAAmC,SAAnC,CACA,OAASC,MAAT,KAAuB,YAAvB,C,2CAEA,GAAMC,CAAAA,UAAU,CACd,QADIA,CAAAA,UACJ,CAACC,OAAD,QACA,UAACC,MAAD,CAA+B,CAC7B,GAAMC,CAAAA,GAAG,CAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ,CACA,GAAI,CAACD,GAAL,CAAU,OACVE,qBAAqB,CAAC,iBAAMJ,CAAAA,OAAO,CAACE,GAAD,CAAb,EAAD,CAArB,CACD,CALD,EADF,CAQA,GAAMG,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAA0D,IAAvDC,CAAAA,MAAuD,MAAvDA,MAAuD,CAA/CC,KAA+C,MAA/CA,KAA+C,CACvE,GAAMC,CAAAA,YAAmB,CAAG,CAC1BC,GAAG,CAAE,CACH,CAAEC,CAAC,CAAE,GAAL,CAAUC,CAAC,CAAE,GAAb,CAAkBC,EAAE,CAAE,CAAtB,CAAyBC,EAAE,CAAE,CAA7B,CADG,CAEH,CAAEH,CAAC,CAAE,GAAL,CAAUC,CAAC,CAAE,GAAb,CAAkBC,EAAE,CAAE,CAAC,CAAvB,CAA0BC,EAAE,CAAE,CAAC,CAA/B,CAFG,CADqB,CAK1BC,IAAI,CAAE,CAAER,MAAM,CAANA,MAAF,CAAUC,KAAK,CAALA,KAAV,CALoB,CAA5B,CAQA,GAAMQ,CAAAA,GAAG,CAAGrB,MAAM,EAAlB,CACA,GAAMsB,CAAAA,KAAK,CAAGtB,MAAM,CAAQc,YAAR,CAApB,CAEA,GAAMR,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACE,GAAD,CAAmC,CACjDc,KAAK,CAACC,OAAN,CAAgBrB,IAAI,CAACoB,KAAK,CAACC,OAAP,CAApB,CACAnB,MAAM,CAACI,GAAD,CAAN,CAAYc,KAAK,CAACC,OAAlB,EACAb,qBAAqB,CAAC,iBAAMJ,CAAAA,OAAO,CAACE,GAAD,CAAb,EAAD,CAArB,CACD,CAJD,CAKA,GAAMgB,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,CAAD,CAAqB,CACnCH,KAAK,CAACC,OAAN,CAAgBpB,KAAK,CAACmB,KAAK,CAACC,OAAP,CAAL,CAAqBE,CAArB,CAAhB,CACD,CAFD,CAGAxB,SAAS,CAAC,UAAM,CACd,GAAIoB,GAAG,CAACE,OAAR,CAAiB,CACflB,UAAU,CAACC,OAAD,CAAV,CAAoBe,GAAG,CAACE,OAAxB,EACAF,GAAG,CAACE,OAAJ,CAAYG,gBAAZ,CAA6B,OAA7B,CAAsCF,OAAtC,EACD,CACD,MAAO,WAAM,CACXH,GAAG,CAACE,OAAJ,CAAYI,mBAAZ,CAAgC,OAAhC,CAAyCH,OAAzC,EACD,CAFD,CAGD,CARQ,CAQN,EARM,CAAT,CASA,mBAAO,eAAcZ,MAAM,CAANA,MAAd,CAAsBC,KAAK,CAALA,KAAtB,CAA6BQ,GAAG,CAAHA,GAA7B,EAAP,CACD,CA9BD,CAgCA,cAAeV,CAAAA,MAAf","sourcesContent":["import { useRef, useEffect } from 'react'\nimport { State, step, click } from './state'\nimport { render } from './renderer'\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = {\n    pos: [\n      { x: 123, y: 123, dx: 4, dy: 4 },\n      { x: 600, y: 600, dx: -4, dy: -4 },\n    ],\n    size: { height, width },\n  }\n\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    state.current = step(state.current)\n    render(ctx)(state.current)\n    requestAnimationFrame(() => iterate(ctx))\n  }\n  const onClick = (e: PointerEvent) => {\n    state.current = click(state.current)(e)\n  }\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current)\n      ref.current.addEventListener('click', onClick)\n    }\n    return () => {\n      ref.current.removeEventListener('click', onClick)\n    }\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}