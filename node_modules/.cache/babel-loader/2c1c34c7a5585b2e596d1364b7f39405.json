{"ast":null,"code":"var _jsxFileName = \"/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport { step } from './state';\nimport { render } from './renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  pos: {\n    x: 123,\n    y: 123\n  }\n};\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const ref = useRef();\n  const state = useRef(initialState);\n\n  const iterate = ctx => {\n    state.current = step(state.current);\n    render(ctx)(state.current);\n    requestAnimationFrame(() => iterate(ctx));\n  };\n\n  useEffect(() => {\n    if (ref.current) initCanvas(iterate)(ref.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"Gpm0P4FfDB25XYapIJctmdb7SaA=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx"],"names":["useRef","useEffect","step","render","initialState","pos","x","y","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","ref","state","current"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAAgBC,IAAhB,QAA4B,SAA5B;AACA,SAASC,MAAT,QAAuB,YAAvB;;AAEA,MAAMC,YAAmB,GAAG;AAAEC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAAP,CAA5B;;AAEA,MAAMC,UAAU,GACbC,OAAD,IACCC,MAAD,IAA+B;AAC7B,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAI,CAACD,GAAL,EAAU;AACVE,EAAAA,qBAAqB,CAAC,MAAMJ,OAAO,CAACE,GAAD,CAAd,CAArB;AACD,CANH;;AAQA,MAAMG,MAAM,GAAG,QAA4D;AAAA;;AAAA,MAA3D;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAA2D;AACzE,QAAMC,GAAG,GAAGjB,MAAM,EAAlB;AACA,QAAMkB,KAAK,GAAGlB,MAAM,CAAQI,YAAR,CAApB;;AACA,QAAMK,OAAO,GAAIE,GAAD,IAAmC;AACjDO,IAAAA,KAAK,CAACC,OAAN,GAAgBjB,IAAI,CAACgB,KAAK,CAACC,OAAP,CAApB;AACAhB,IAAAA,MAAM,CAACQ,GAAD,CAAN,CAAYO,KAAK,CAACC,OAAlB;AACAN,IAAAA,qBAAqB,CAAC,MAAMJ,OAAO,CAACE,GAAD,CAAd,CAArB;AACD,GAJD;;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,GAAG,CAACE,OAAR,EAAiBX,UAAU,CAACC,OAAD,CAAV,CAAoBQ,GAAG,CAACE,OAAxB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAGA,sBAAO;AAAcJ,IAAAA,MAAd;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAZD;;GAAMH,M;;KAAAA,M;AAcN,eAAeA,MAAf","sourcesContent":["import { useRef, useEffect } from 'react'\nimport { State, step } from './state'\nimport { render } from './renderer'\n\nconst initialState: State = { pos: { x: 123, y: 123 } }\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height?: number; width?: number }) => {\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    state.current = step(state.current)\n    render(ctx)(state.current)\n    requestAnimationFrame(() => iterate(ctx))\n  }\n  useEffect(() => {\n    if (ref.current) initCanvas(iterate)(ref.current)\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}