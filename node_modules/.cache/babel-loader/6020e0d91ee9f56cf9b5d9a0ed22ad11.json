{"ast":null,"code":"import * as conf from './conf';\n\nconst dist2 = (o1, o2) => Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2);\n\nconst iterate = bound => ball => {\n  const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible;\n  const coord = ball.coord;\n  const dx = (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS ? -coord.dx : coord.dx) * conf.FRICTION;\n  const dy = (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS ? -coord.dy : coord.dy) * conf.FRICTION;\n  if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE) return { ...ball,\n    invincible,\n    coord: { ...coord,\n      dx: 0,\n      dy: 0\n    }\n  };\n  return { ...ball,\n    invincible,\n    coord: {\n      x: coord.x + dx,\n      y: coord.y + dy,\n      dx,\n      dy\n    }\n  };\n};\n\nexport const clickEnd = state => event => {\n  return state;\n};\nexport const click = state => event => {\n  const {\n    offsetX,\n    offsetY\n  } = event;\n  console.log(offsetX, offsetY);\n  const target = state.pos.find(p => dist2(p.coord, {\n    x: offsetX,\n    y: offsetY,\n    dx: 0,\n    dy: 0\n  }) < Math.pow(conf.RADIUS, 2) + 100);\n\n  if (target) {\n    target.coord.dx += Math.random() * 10;\n    target.coord.dy += Math.random() * 10;\n  }\n\n  return state;\n};\n\nconst collide = (o1, o2) => dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2);\n\nconst collideBoing = (p1, p2) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS);\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS);\n  const gx = -ny;\n  const gy = nx;\n  const v1g = gx * p1.dx + gy * p1.dy;\n  const v2n = nx * p2.dx + ny * p2.dy;\n  const v2g = gx * p2.dx + gy * p2.dy;\n  const v1n = nx * p1.dx + ny * p1.dy;\n  p1.dx = nx * v2n + gx * v1g;\n  p1.dy = ny * v2n + gy * v1g;\n  p2.dx = nx * v1n + gx * v2g;\n  p2.dy = ny * v1n + gy * v2g;\n  p1.x += p1.dx;\n  p1.y += p1.dy;\n  p2.x += p2.dx;\n  p2.y += p2.dy;\n};\n\nexport const step = state => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map(p2 => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--;\n          p1.invincible = 20;\n        }\n\n        if (!p2.invincible) {\n          p2.life--;\n          p2.invincible = 20;\n        }\n\n        collideBoing(p1.coord, p2.coord);\n      }\n    });\n  });\n  if (state.player.invincible) state.player.invincible--;\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord);\n\n      if (!state.player.invincible) {\n        state.player.life--;\n        state.player.invincible = 20;\n      }\n\n      if (!p1.invincible) {\n        p1.life--;\n        p1.invincible = 20;\n      }\n    }\n  });\n  return { ...state,\n    player: iterate(state.size)(state.player),\n    pos: state.pos.map(iterate(state.size)).filter(p => p.life > 0)\n  };\n};\nexport const mouseMove = state => event => {\n  return state;\n};\nexport const endOfGame = state => state.pos.length > 0;","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/state.ts"],"names":["conf","dist2","o1","o2","Math","pow","x","y","iterate","bound","ball","invincible","coord","dx","RADIUS","width","FRICTION","dy","height","abs","MINMOVE","clickEnd","state","event","click","offsetX","offsetY","console","log","target","pos","find","p","random","collide","collideBoing","p1","p2","nx","ny","gx","gy","v1g","v2n","v2g","v1n","step","map","i","arr","slice","life","player","size","filter","mouseMove","endOfGame","length"],"mappings":"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","sourcesContent":["import * as conf from './conf'\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Ball = { coord: Coord; life: number; invincible?: number }\ntype Size = { height: number; width: number }\nexport type State = {\n  pos: Array<Ball>\n  size: Size\n  player: Ball\n  endOfGame: boolean\n}\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\nconst iterate =\n  (bound: Size) =>\n  (ball: Ball): Ball => {\n    const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible\n    const coord = ball.coord\n    const dx =\n      (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n        ? -coord.dx\n        : coord.dx) * conf.FRICTION\n    const dy =\n      (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n        ? -coord.dy\n        : coord.dy) * conf.FRICTION\n    if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE)\n      return { ...ball, invincible, coord: { ...coord, dx: 0, dy: 0 } }\n    return {\n      ...ball,\n      invincible,\n      coord: {\n        x: coord.x + dx,\n        y: coord.y + dy,\n        dx,\n        dy,\n      },\n    }\n  }\n\nexport const clickEnd =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    return state\n  }\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    console.log(offsetX, offsetY)\n    const target = state.pos.find(\n      (p) =>\n        dist2(p.coord, { x: offsetX, y: offsetY, dx: 0, dy: 0 }) <\n        Math.pow(conf.RADIUS, 2) + 100\n    )\n    if (target) {\n      target.coord.dx += Math.random() * 10\n      target.coord.dy += Math.random() * 10\n    }\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nconst collideBoing = (p1: Coord, p2: Coord) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v2n = nx * p2.dx + ny * p2.dy\n  const v2g = gx * p2.dx + gy * p2.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx = nx * v2n + gx * v1g\n  p1.dy = ny * v2n + gy * v1g\n  p2.dx = nx * v1n + gx * v2g\n  p2.dy = ny * v1n + gy * v2g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  p2.x += p2.dx\n  p2.y += p2.dy\n}\n\nexport const step = (state: State): State => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--\n          p1.invincible = 20\n        }\n        if (!p2.invincible) {\n          p2.life--\n          p2.invincible = 20\n        }\n        collideBoing(p1.coord, p2.coord)\n      }\n    })\n  })\n  if (state.player.invincible) state.player.invincible--\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord)\n      if (!state.player.invincible) {\n        state.player.life--\n        state.player.invincible = 20\n      }\n      if (!p1.invincible) {\n        p1.life--\n        p1.invincible = 20\n      }\n    }\n  })\n  return {\n    ...state,\n    player: iterate(state.size)(state.player),\n    pos: state.pos.map(iterate(state.size)).filter((p) => p.life > 0),\n  }\n}\n\nexport const mouseMove =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    return state\n  }\n\nexport const endOfGame = (state: State): boolean => state.pos.length > 0\n"]},"metadata":{},"sourceType":"module"}