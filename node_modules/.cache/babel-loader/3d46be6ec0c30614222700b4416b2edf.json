{"ast":null,"code":"import * as conf from './conf';\n\nconst dist2 = (o1, o2) => Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2);\n\nconst iterate = bound => ball => {\n  const coord = ball.coord;\n  const dx = (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS ? -coord.dx : coord.dx) * conf.FRICTION;\n  const dy = (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS ? -coord.dy : coord.dy) * conf.FRICTION;\n  if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE) return { ...ball,\n    coord: { ...coord,\n      dx: 0,\n      dy: 0\n    }\n  };\n  return { ...ball,\n    coord: {\n      x: coord.x + dx,\n      y: coord.y + dy,\n      dx,\n      dy\n    }\n  };\n};\n\nexport const click = state => event => {\n  const {\n    offsetX,\n    offsetY\n  } = event;\n  const target = state.pos.find(p => dist2(p.coord, {\n    x: offsetX,\n    y: offsetY,\n    dx: 0,\n    dy: 0\n  }) < Math.pow(conf.RADIUS, 2) + 100);\n\n  if (target) {\n    target.coord.dx += Math.random() * 10;\n    target.coord.dy += Math.random() * 10;\n  }\n\n  return state;\n};\n\nconst collide = (o1, o2) => dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2);\n\nconst collideBoing = (p1, p2) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS);\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS);\n  const gx = -ny;\n  const gy = nx;\n  const v1g = gx * p1.dx + gy * p1.dy;\n  const v2n = nx * p2.dx + ny * p2.dy;\n  const v2g = gx * p2.dx + gy * p2.dy;\n  const v1n = nx * p1.dx + ny * p1.dy;\n  p1.dx = nx * v2n + gx * v1g;\n  p1.dy = ny * v2n + gy * v1g;\n  p2.dx = nx * v1n + gx * v2g;\n  p2.dy = ny * v1n + gy * v2g;\n  p1.x += p1.dx;\n  p1.y += p1.dy;\n  p2.x += p2.dx;\n  p2.y += p2.dy;\n};\n\nexport const step = state => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map(p2 => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--;\n          p1.invincible = 20;\n        } else {\n          p1.invincible--;\n        }\n\n        collideBoing(p1.coord, p2.coord);\n      }\n    });\n  });\n  if (state.player.invincible) state.player.invincible--;\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, { ...state.player.coord\n      });\n\n      if (!state.player.invincible) {\n        state.player.life--;\n        state.player.invincible = 20;\n      }\n    }\n  });\n  return { ...state,\n    pos: state.pos.map(iterate(state.size))\n  };\n};\nexport const mouseMove = state => event => {\n  const {\n    offsetX,\n    offsetY\n  } = event;\n  state.player = { ...state.player,\n    coord: {\n      x: offsetX,\n      y: offsetY,\n      dx: offsetX - state.player.coord.x,\n      dy: offsetY - state.player.coord.y\n    }\n  };\n  return state;\n};\nexport const endOfGame = state => {\n  return state.player.life > 0;\n};","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/state.ts"],"names":["conf","dist2","o1","o2","Math","pow","x","y","iterate","bound","ball","coord","dx","RADIUS","width","FRICTION","dy","height","abs","MINMOVE","click","state","event","offsetX","offsetY","target","pos","find","p","random","collide","collideBoing","p1","p2","nx","ny","gx","gy","v1g","v2n","v2g","v1n","step","map","i","arr","slice","invincible","life","player","size","mouseMove","endOfGame"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;;AAWA,MAAMC,KAAK,GAAG,CAACC,EAAD,EAAYC,EAAZ,KACZC,IAAI,CAACC,GAAL,CAASH,EAAE,CAACI,CAAH,GAAOH,EAAE,CAACG,CAAnB,EAAsB,CAAtB,IAA2BF,IAAI,CAACC,GAAL,CAASH,EAAE,CAACK,CAAH,GAAOJ,EAAE,CAACI,CAAnB,EAAsB,CAAtB,CAD7B;;AAGA,MAAMC,OAAO,GAAIC,KAAD,IAAkBC,IAAD,IAAgB;AAC/C,QAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;AACA,QAAMC,EAAE,GACN,CAACD,KAAK,CAACL,CAAN,GAAUN,IAAI,CAACa,MAAf,GAAwBJ,KAAK,CAACK,KAA9B,IAAuCH,KAAK,CAACL,CAAN,GAAUN,IAAI,CAACa,MAAtD,GACG,CAACF,KAAK,CAACC,EADV,GAEGD,KAAK,CAACC,EAFV,IAEgBZ,IAAI,CAACe,QAHvB;AAIA,QAAMC,EAAE,GACN,CAACL,KAAK,CAACJ,CAAN,GAAUP,IAAI,CAACa,MAAf,GAAwBJ,KAAK,CAACQ,MAA9B,IAAwCN,KAAK,CAACJ,CAAN,GAAUP,IAAI,CAACa,MAAvD,GACG,CAACF,KAAK,CAACK,EADV,GAEGL,KAAK,CAACK,EAFV,IAEgBhB,IAAI,CAACe,QAHvB;AAIA,MAAIX,IAAI,CAACc,GAAL,CAASN,EAAT,IAAeR,IAAI,CAACc,GAAL,CAASF,EAAT,CAAf,GAA8BhB,IAAI,CAACmB,OAAvC,EACE,OAAO,EAAE,GAAGT,IAAL;AAAWC,IAAAA,KAAK,EAAE,EAAE,GAAGA,KAAL;AAAYC,MAAAA,EAAE,EAAE,CAAhB;AAAmBI,MAAAA,EAAE,EAAE;AAAvB;AAAlB,GAAP;AACF,SAAO,EACL,GAAGN,IADE;AAELC,IAAAA,KAAK,EAAE;AACLL,MAAAA,CAAC,EAAEK,KAAK,CAACL,CAAN,GAAUM,EADR;AAELL,MAAAA,CAAC,EAAEI,KAAK,CAACJ,CAAN,GAAUS,EAFR;AAGLJ,MAAAA,EAHK;AAILI,MAAAA;AAJK;AAFF,GAAP;AASD,CArBD;;AAuBA,OAAO,MAAMI,KAAK,GACfC,KAAD,IACCC,KAAD,IAAgC;AAC9B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBF,KAA7B;AACA,QAAMG,MAAM,GAAGJ,KAAK,CAACK,GAAN,CAAUC,IAAV,CACZC,CAAD,IACE3B,KAAK,CAAC2B,CAAC,CAACjB,KAAH,EAAU;AAAEL,IAAAA,CAAC,EAAEiB,OAAL;AAAchB,IAAAA,CAAC,EAAEiB,OAAjB;AAA0BZ,IAAAA,EAAE,EAAE,CAA9B;AAAiCI,IAAAA,EAAE,EAAE;AAArC,GAAV,CAAL,GACAZ,IAAI,CAACC,GAAL,CAASL,IAAI,CAACa,MAAd,EAAsB,CAAtB,IAA2B,GAHhB,CAAf;;AAKA,MAAIY,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACd,KAAP,CAAaC,EAAb,IAAmBR,IAAI,CAACyB,MAAL,KAAgB,EAAnC;AACAJ,IAAAA,MAAM,CAACd,KAAP,CAAaK,EAAb,IAAmBZ,IAAI,CAACyB,MAAL,KAAgB,EAAnC;AACD;;AACD,SAAOR,KAAP;AACD,CAdI;;AAgBP,MAAMS,OAAO,GAAG,CAAC5B,EAAD,EAAYC,EAAZ,KACdF,KAAK,CAACC,EAAD,EAAKC,EAAL,CAAL,GAAgBC,IAAI,CAACC,GAAL,CAAS,IAAIL,IAAI,CAACa,MAAlB,EAA0B,CAA1B,CADlB;;AAGA,MAAMkB,YAAY,GAAG,CAACC,EAAD,EAAYC,EAAZ,KAA0B;AAC7C,QAAMC,EAAE,GAAG,CAACD,EAAE,CAAC3B,CAAH,GAAO0B,EAAE,CAAC1B,CAAX,KAAiB,IAAIN,IAAI,CAACa,MAA1B,CAAX;AACA,QAAMsB,EAAE,GAAG,CAACF,EAAE,CAAC1B,CAAH,GAAOyB,EAAE,CAACzB,CAAX,KAAiB,IAAIP,IAAI,CAACa,MAA1B,CAAX;AACA,QAAMuB,EAAE,GAAG,CAACD,EAAZ;AACA,QAAME,EAAE,GAAGH,EAAX;AAEA,QAAMI,GAAG,GAAGF,EAAE,GAAGJ,EAAE,CAACpB,EAAR,GAAayB,EAAE,GAAGL,EAAE,CAAChB,EAAjC;AACA,QAAMuB,GAAG,GAAGL,EAAE,GAAGD,EAAE,CAACrB,EAAR,GAAauB,EAAE,GAAGF,EAAE,CAACjB,EAAjC;AACA,QAAMwB,GAAG,GAAGJ,EAAE,GAAGH,EAAE,CAACrB,EAAR,GAAayB,EAAE,GAAGJ,EAAE,CAACjB,EAAjC;AACA,QAAMyB,GAAG,GAAGP,EAAE,GAAGF,EAAE,CAACpB,EAAR,GAAauB,EAAE,GAAGH,EAAE,CAAChB,EAAjC;AACAgB,EAAAA,EAAE,CAACpB,EAAH,GAAQsB,EAAE,GAAGK,GAAL,GAAWH,EAAE,GAAGE,GAAxB;AACAN,EAAAA,EAAE,CAAChB,EAAH,GAAQmB,EAAE,GAAGI,GAAL,GAAWF,EAAE,GAAGC,GAAxB;AACAL,EAAAA,EAAE,CAACrB,EAAH,GAAQsB,EAAE,GAAGO,GAAL,GAAWL,EAAE,GAAGI,GAAxB;AACAP,EAAAA,EAAE,CAACjB,EAAH,GAAQmB,EAAE,GAAGM,GAAL,GAAWJ,EAAE,GAAGG,GAAxB;AACAR,EAAAA,EAAE,CAAC1B,CAAH,IAAQ0B,EAAE,CAACpB,EAAX;AACAoB,EAAAA,EAAE,CAACzB,CAAH,IAAQyB,EAAE,CAAChB,EAAX;AACAiB,EAAAA,EAAE,CAAC3B,CAAH,IAAQ2B,EAAE,CAACrB,EAAX;AACAqB,EAAAA,EAAE,CAAC1B,CAAH,IAAQ0B,EAAE,CAACjB,EAAX;AACD,CAlBD;;AAoBA,OAAO,MAAM0B,IAAI,GAAIrB,KAAD,IAAkB;AACpCA,EAAAA,KAAK,CAACK,GAAN,CAAUiB,GAAV,CAAc,CAACX,EAAD,EAAKY,CAAL,EAAQC,GAAR,KAAgB;AAC5BA,IAAAA,GAAG,CAACC,KAAJ,CAAUF,CAAC,GAAG,CAAd,EAAiBD,GAAjB,CAAsBV,EAAD,IAAQ;AAC3B,UAAIH,OAAO,CAACE,EAAE,CAACrB,KAAJ,EAAWsB,EAAE,CAACtB,KAAd,CAAX,EAAiC;AAC/B,YAAI,CAACqB,EAAE,CAACe,UAAR,EAAoB;AAClBf,UAAAA,EAAE,CAACgB,IAAH;AACAhB,UAAAA,EAAE,CAACe,UAAH,GAAgB,EAAhB;AACD,SAHD,MAGO;AACLf,UAAAA,EAAE,CAACe,UAAH;AACD;;AACDhB,QAAAA,YAAY,CAACC,EAAE,CAACrB,KAAJ,EAAWsB,EAAE,CAACtB,KAAd,CAAZ;AACD;AACF,KAVD;AAWD,GAZD;AAaA,MAAIU,KAAK,CAAC4B,MAAN,CAAaF,UAAjB,EAA6B1B,KAAK,CAAC4B,MAAN,CAAaF,UAAb;AAE7B1B,EAAAA,KAAK,CAACK,GAAN,CAAUiB,GAAV,CAAc,CAACX,EAAD,EAAKY,CAAL,KAAW;AACvB,QAAId,OAAO,CAACE,EAAE,CAACrB,KAAJ,EAAWU,KAAK,CAAC4B,MAAN,CAAatC,KAAxB,CAAX,EAA2C;AACzCoB,MAAAA,YAAY,CAACC,EAAE,CAACrB,KAAJ,EAAW,EAAE,GAAGU,KAAK,CAAC4B,MAAN,CAAatC;AAAlB,OAAX,CAAZ;;AACA,UAAI,CAACU,KAAK,CAAC4B,MAAN,CAAaF,UAAlB,EAA8B;AAC5B1B,QAAAA,KAAK,CAAC4B,MAAN,CAAaD,IAAb;AACA3B,QAAAA,KAAK,CAAC4B,MAAN,CAAaF,UAAb,GAA0B,EAA1B;AACD;AACF;AACF,GARD;AASA,SAAO,EACL,GAAG1B,KADE;AAELK,IAAAA,GAAG,EAAEL,KAAK,CAACK,GAAN,CAAUiB,GAAV,CAAcnC,OAAO,CAACa,KAAK,CAAC6B,IAAP,CAArB;AAFA,GAAP;AAID,CA7BM;AA+BP,OAAO,MAAMC,SAAS,GACnB9B,KAAD,IACCC,KAAD,IAAgC;AAC9B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBF,KAA7B;AACAD,EAAAA,KAAK,CAAC4B,MAAN,GAAe,EACb,GAAG5B,KAAK,CAAC4B,MADI;AAEbtC,IAAAA,KAAK,EAAE;AACLL,MAAAA,CAAC,EAAEiB,OADE;AAELhB,MAAAA,CAAC,EAAEiB,OAFE;AAGLZ,MAAAA,EAAE,EAAEW,OAAO,GAAGF,KAAK,CAAC4B,MAAN,CAAatC,KAAb,CAAmBL,CAH5B;AAILU,MAAAA,EAAE,EAAEQ,OAAO,GAAGH,KAAK,CAAC4B,MAAN,CAAatC,KAAb,CAAmBJ;AAJ5B;AAFM,GAAf;AASA,SAAOc,KAAP;AACD,CAdI;AAgBP,OAAO,MAAM+B,SAAS,GAAI/B,KAAD,IAA2B;AAClD,SAAOA,KAAK,CAAC4B,MAAN,CAAaD,IAAb,GAAoB,CAA3B;AACD,CAFM","sourcesContent":["import * as conf from './conf'\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Ball = { coord: Coord; life: number; invincible?: number }\ntype Size = { height: number; width: number }\nexport type State = {\n  pos: Array<Ball>\n  size: Size\n  player: Ball\n  endOfGame: boolean\n}\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\nconst iterate = (bound: Size) => (ball: Ball) => {\n  const coord = ball.coord\n  const dx =\n    (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n      ? -coord.dx\n      : coord.dx) * conf.FRICTION\n  const dy =\n    (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n      ? -coord.dy\n      : coord.dy) * conf.FRICTION\n  if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE)\n    return { ...ball, coord: { ...coord, dx: 0, dy: 0 } }\n  return {\n    ...ball,\n    coord: {\n      x: coord.x + dx,\n      y: coord.y + dy,\n      dx,\n      dy,\n    },\n  }\n}\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    const target = state.pos.find(\n      (p) =>\n        dist2(p.coord, { x: offsetX, y: offsetY, dx: 0, dy: 0 }) <\n        Math.pow(conf.RADIUS, 2) + 100\n    )\n    if (target) {\n      target.coord.dx += Math.random() * 10\n      target.coord.dy += Math.random() * 10\n    }\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nconst collideBoing = (p1: Coord, p2: Coord) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v2n = nx * p2.dx + ny * p2.dy\n  const v2g = gx * p2.dx + gy * p2.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx = nx * v2n + gx * v1g\n  p1.dy = ny * v2n + gy * v1g\n  p2.dx = nx * v1n + gx * v2g\n  p2.dy = ny * v1n + gy * v2g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  p2.x += p2.dx\n  p2.y += p2.dy\n}\n\nexport const step = (state: State) => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--\n          p1.invincible = 20\n        } else {\n          p1.invincible--\n        }\n        collideBoing(p1.coord, p2.coord)\n      }\n    })\n  })\n  if (state.player.invincible) state.player.invincible--\n\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, { ...state.player.coord })\n      if (!state.player.invincible) {\n        state.player.life--\n        state.player.invincible = 20\n      }\n    }\n  })\n  return {\n    ...state,\n    pos: state.pos.map(iterate(state.size)),\n  }\n}\n\nexport const mouseMove =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    state.player = {\n      ...state.player,\n      coord: {\n        x: offsetX,\n        y: offsetY,\n        dx: offsetX - state.player.coord.x,\n        dy: offsetY - state.player.coord.y,\n      },\n    }\n    return state\n  }\n\nexport const endOfGame = (state: State): boolean => {\n  return state.player.life > 0\n}\n"]},"metadata":{},"sourceType":"module"}