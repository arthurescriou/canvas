{"ast":null,"code":"import * as conf from './conf';\n\nconst iterate = bound => coord => {\n  const dx = (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS ? -coord.dx : coord.dx) * conf.FRICTION;\n  const dy = (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS ? -coord.dy : coord.dy) * conf.FRICTION;\n  return {\n    x: coord.x + dx,\n    y: coord.y + dy,\n    dx: Math.abs(dx) < conf.MINMOVE ? 0 : dx,\n    dy: Math.abs(dy) < conf.MINMOVE ? 0 : dy\n  };\n};\n\nexport const click = state => event => {\n  const {\n    offsetX,\n    offsetY\n  } = event;\n  console.log(offsetX, offsetY);\n  return state;\n};\n\nconst collide = (o1, o2) => Math.abs(o1.x - o2.x) + Math.abs(o1.y - o2.y) < Math.pow(conf.RADIUS, 2);\n\nexport const step = state => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map(p2 => {\n      if (collide(p1, p2)) {}\n    });\n  });\n  return { ...state,\n    pos: state.pos.map(iterate(state.size))\n  };\n};","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/state.ts"],"names":["conf","iterate","bound","coord","dx","x","RADIUS","width","FRICTION","dy","y","height","Math","abs","MINMOVE","click","state","event","offsetX","offsetY","console","log","collide","o1","o2","pow","step","pos","map","p1","i","arr","slice","p2","size"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;;AAKA,MAAMC,OAAO,GAAIC,KAAD,IAAkBC,KAAD,IAAkB;AACjD,QAAMC,EAAE,GACN,CAACD,KAAK,CAACE,CAAN,GAAUL,IAAI,CAACM,MAAf,GAAwBJ,KAAK,CAACK,KAA9B,IAAuCJ,KAAK,CAACE,CAAN,GAAUL,IAAI,CAACM,MAAtD,GACG,CAACH,KAAK,CAACC,EADV,GAEGD,KAAK,CAACC,EAFV,IAEgBJ,IAAI,CAACQ,QAHvB;AAIA,QAAMC,EAAE,GACN,CAACN,KAAK,CAACO,CAAN,GAAUV,IAAI,CAACM,MAAf,GAAwBJ,KAAK,CAACS,MAA9B,IAAwCR,KAAK,CAACO,CAAN,GAAUV,IAAI,CAACM,MAAvD,GACG,CAACH,KAAK,CAACM,EADV,GAEGN,KAAK,CAACM,EAFV,IAEgBT,IAAI,CAACQ,QAHvB;AAIA,SAAO;AACLH,IAAAA,CAAC,EAAEF,KAAK,CAACE,CAAN,GAAUD,EADR;AAELM,IAAAA,CAAC,EAAEP,KAAK,CAACO,CAAN,GAAUD,EAFR;AAGLL,IAAAA,EAAE,EAAEQ,IAAI,CAACC,GAAL,CAAST,EAAT,IAAeJ,IAAI,CAACc,OAApB,GAA8B,CAA9B,GAAkCV,EAHjC;AAILK,IAAAA,EAAE,EAAEG,IAAI,CAACC,GAAL,CAASJ,EAAT,IAAeT,IAAI,CAACc,OAApB,GAA8B,CAA9B,GAAkCL;AAJjC,GAAP;AAMD,CAfD;;AAiBA,OAAO,MAAMM,KAAK,GACfC,KAAD,IACCC,KAAD,IAAgC;AAC9B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBF,KAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqBC,OAArB;AACA,SAAOH,KAAP;AACD,CANI;;AAQP,MAAMM,OAAO,GAAG,CAACC,EAAD,EAAYC,EAAZ,KACdZ,IAAI,CAACC,GAAL,CAASU,EAAE,CAAClB,CAAH,GAAOmB,EAAE,CAACnB,CAAnB,IAAwBO,IAAI,CAACC,GAAL,CAASU,EAAE,CAACb,CAAH,GAAOc,EAAE,CAACd,CAAnB,CAAxB,GAAgDE,IAAI,CAACa,GAAL,CAASzB,IAAI,CAACM,MAAd,EAAsB,CAAtB,CADlD;;AAGA,OAAO,MAAMoB,IAAI,GAAIV,KAAD,IAAkB;AACpCA,EAAAA,KAAK,CAACW,GAAN,CAAUC,GAAV,CAAc,CAACC,EAAD,EAAKC,CAAL,EAAQC,GAAR,KAAgB;AAC5BA,IAAAA,GAAG,CAACC,KAAJ,CAAUF,CAAC,GAAG,CAAd,EAAiBF,GAAjB,CAAsBK,EAAD,IAAQ;AAC3B,UAAIX,OAAO,CAACO,EAAD,EAAKI,EAAL,CAAX,EAAqB,CACpB;AACF,KAHD;AAID,GALD;AAMA,SAAO,EACL,GAAGjB,KADE;AAELW,IAAAA,GAAG,EAAEX,KAAK,CAACW,GAAN,CAAUC,GAAV,CAAc3B,OAAO,CAACe,KAAK,CAACkB,IAAP,CAArB;AAFA,GAAP;AAID,CAXM","sourcesContent":["import * as conf from './conf'\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Size = { height: number; width: number }\nexport type State = { pos: Array<Coord>; size: Size }\n\nconst iterate = (bound: Size) => (coord: Coord) => {\n  const dx =\n    (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n      ? -coord.dx\n      : coord.dx) * conf.FRICTION\n  const dy =\n    (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n      ? -coord.dy\n      : coord.dy) * conf.FRICTION\n  return {\n    x: coord.x + dx,\n    y: coord.y + dy,\n    dx: Math.abs(dx) < conf.MINMOVE ? 0 : dx,\n    dy: Math.abs(dy) < conf.MINMOVE ? 0 : dy,\n  }\n}\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    console.log(offsetX, offsetY)\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  Math.abs(o1.x - o2.x) + Math.abs(o1.y - o2.y) < Math.pow(conf.RADIUS, 2)\n\nexport const step = (state: State) => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1, p2)) {\n      }\n    })\n  })\n  return {\n    ...state,\n    pos: state.pos.map(iterate(state.size)),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}