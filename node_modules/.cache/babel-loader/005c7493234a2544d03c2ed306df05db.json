{"ast":null,"code":"import * as conf from './conf';\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#00ff00',\n  BLUE: '#0000ff'\n};\n\nconst toDoubleHexa = n => n < 16 ? '0' + n.toString(16) : n.toString(16);\n\nexport const rgbaTorgb = function (rgb) {\n  let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1];\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2];\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3];\n    r = parseInt(hexR, 16);\n    g = parseInt(hexG, 16);\n    b = parseInt(hexB, 16);\n  }\n\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '');\n    const splitted = val.split(',');\n    r = parseInt(splitted[0]);\n    g = parseInt(splitted[1]);\n    b = parseInt(splitted[2]);\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0);\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0);\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0);\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`;\n};\n\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = ctx.canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\n\nconst drawCirle = (ctx, _ref, color) => {\n  let {\n    x,\n    y\n  } = _ref;\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.arc(x, y, conf.RADIUS, 0, 2 * Math.PI);\n  ctx.fill();\n};\n\nexport const render = ctx => state => {\n  clear(ctx);\n  state.pos.map(c => drawCirle(ctx, c.coord, rgbaTorgb(COLORS.RED, (conf.BALLLIFE - c.life) * (1 / conf.BALLLIFE))));\n  drawCirle(ctx, state.player.coord, rgbaTorgb(COLORS.BLUE, (conf.PLAYERLIFE - state.player.life) * (1 / conf.PLAYERLIFE)));\n  ctx.font = '96px arial';\n  ctx.strokeText(`life ${state.player.life}`, 20, 100);\n  ctx.strokeText(`balls life ${state.pos.map(p => p.life).reduce((acc, val) => acc + val, 0)}`, 20, 200);\n\n  if (state.endOfGame) {\n    const text = state.pos.length > 0 ? 'YOU LOSE' : 'YOU WIN';\n    ctx.font = '48px';\n    ctx.strokeText(text, state.size.width / 2 - 200, state.size.height / 2);\n  }\n};","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/renderer.ts"],"names":["conf","COLORS","RED","GREEN","BLUE","toDoubleHexa","n","toString","rgbaTorgb","rgb","alpha","r","g","b","startsWith","hexR","length","slice","hexG","hexB","parseInt","val","replace","splitted","split","Math","max","min","floor","clear","ctx","height","width","canvas","fillStyle","fillRect","drawCirle","color","x","y","beginPath","arc","RADIUS","PI","fill","render","state","pos","map","c","coord","BALLLIFE","life","player","PLAYERLIFE","font","strokeText","p","reduce","acc","endOfGame","text","size"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { State } from './state'\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#00ff00',\n  BLUE: '#0000ff',\n}\n\nconst toDoubleHexa = (n: number) =>\n  n < 16 ? '0' + n.toString(16) : n.toString(16)\n\nexport const rgbaTorgb = (rgb: string, alpha = 0) => {\n  let r = 0\n  let g = 0\n  let b = 0\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1]\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2]\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3]\n    r = parseInt(hexR, 16)\n    g = parseInt(hexG, 16)\n    b = parseInt(hexB, 16)\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '')\n    const splitted = val.split(',')\n    r = parseInt(splitted[0])\n    g = parseInt(splitted[1])\n    b = parseInt(splitted[2])\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0)\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0)\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0)\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`\n}\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = ctx.canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n\nconst drawCirle = (\n  ctx: CanvasRenderingContext2D,\n  { x, y }: { x: number; y: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(x, y, conf.RADIUS, 0, 2 * Math.PI)\n  ctx.fill()\n}\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  clear(ctx)\n\n  state.pos.map((c) =>\n    drawCirle(\n      ctx,\n      c.coord,\n      rgbaTorgb(COLORS.RED, (conf.BALLLIFE - c.life) * (1 / conf.BALLLIFE))\n    )\n  )\n  drawCirle(\n    ctx,\n    state.player.coord,\n    rgbaTorgb(\n      COLORS.BLUE,\n      (conf.PLAYERLIFE - state.player.life) * (1 / conf.PLAYERLIFE)\n    )\n  )\n  ctx.font = '96px arial'\n  ctx.strokeText(`life ${state.player.life}`, 20, 100)\n  ctx.strokeText(\n    `balls life ${state.pos\n      .map((p) => p.life)\n      .reduce((acc, val) => acc + val, 0)}`,\n    20,\n    200\n  )\n  if (state.endOfGame) {\n    const text = state.pos.length > 0 ? 'YOU LOSE' : 'YOU WIN'\n    ctx.font = '48px'\n    ctx.strokeText(text, state.size.width / 2 - 200, state.size.height / 2)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}