{"ast":null,"code":"var _jsxFileName = \"/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  const {\n    height,\n    width\n  } = canvas;\n  ctx.fillStyle = 'white';\n  ctx.drawImage(0, 0, height, width);\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const ref = useRef();\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx"],"names":["useRef","initCanvas","canvas","ctx","getContext","height","width","fillStyle","drawImage","Canvas","ref"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;;;AAIA,MAAMC,UAAU,GAAIC,MAAD,IAA+B;AAChD,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAI,CAACD,GAAL,EAAU;AACV,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBJ,MAA1B;AACAC,EAAAA,GAAG,CAACI,SAAJ,GAAgB,OAAhB;AACAJ,EAAAA,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBH,MAApB,EAA4BC,KAA5B;AACD,CAND;;AAQA,MAAMG,MAAM,GAAG,QAA4D;AAAA;;AAAA,MAA3D;AAAEJ,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAA2D;AACzE,QAAMI,GAAG,GAAGV,MAAM,EAAlB;AAEA,sBAAO;AAAcK,IAAAA,MAAd;AAAsBC,IAAAA,KAAtB;AAA6BI,IAAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAJD;;GAAMD,M;;KAAAA,M;AAMN,eAAeA,MAAf","sourcesContent":["import { useRef } from 'react'\n\ntype State = { pos: { x: number; y: number } }\n\nconst initCanvas = (canvas: HTMLCanvasElement) => {\n  const ctx = canvas.getContext('2d')\n  if (!ctx) return\n  const { height, width } = canvas\n  ctx.fillStyle = 'white'\n  ctx.drawImage(0, 0, height, width)\n}\n\nconst Canvas = ({ height, width }: { height?: number; width?: number }) => {\n  const ref = useRef<any>()\n\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}