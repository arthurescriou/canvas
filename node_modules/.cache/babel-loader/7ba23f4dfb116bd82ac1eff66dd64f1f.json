{"ast":null,"code":"import * as conf from './conf';\n\nconst dist2 = (o1, o2) => Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2);\n\nconst iterate = bound => coord => {\n  const dx = (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS ? -coord.dx : coord.dx) * conf.FRICTION;\n  const dy = (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS ? -coord.dy : coord.dy) * conf.FRICTION;\n  return {\n    x: coord.x + dx,\n    y: coord.y + dy,\n    dx: Math.abs(dx) < conf.MINMOVE ? 0 : dx,\n    dy: Math.abs(dy) < conf.MINMOVE ? 0 : dy\n  };\n};\n\nexport const click = state => event => {\n  const {\n    offsetX,\n    offsetY\n  } = event;\n  const target = state.pos.find(p => dist2(p, {\n    x: offsetX,\n    y: offsetY,\n    dx: 0,\n    dy: 0\n  }) < Math.pow(conf.RADIUS, 2));\n\n  if (target) {\n    target.dx += Math.random() * 10;\n    target.dy += Math.random() * 10;\n  }\n\n  console.log(offsetX, offsetY);\n  return state;\n};\n\nconst collide = (o1, o2) => dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2);\n\nexport const step = state => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map(p2 => {\n      if (collide(p1, p2)) {}\n    });\n  });\n  return { ...state,\n    pos: state.pos.map(iterate(state.size))\n  };\n};","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/state.ts"],"names":["conf","dist2","o1","o2","Math","pow","x","y","iterate","bound","coord","dx","RADIUS","width","FRICTION","dy","height","abs","MINMOVE","click","state","event","offsetX","offsetY","target","pos","find","p","random","console","log","collide","step","map","p1","i","arr","slice","p2","size"],"mappings":"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","sourcesContent":["import * as conf from './conf'\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Size = { height: number; width: number }\nexport type State = { pos: Array<Coord>; size: Size }\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\nconst iterate = (bound: Size) => (coord: Coord) => {\n  const dx =\n    (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n      ? -coord.dx\n      : coord.dx) * conf.FRICTION\n  const dy =\n    (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n      ? -coord.dy\n      : coord.dy) * conf.FRICTION\n  return {\n    x: coord.x + dx,\n    y: coord.y + dy,\n    dx: Math.abs(dx) < conf.MINMOVE ? 0 : dx,\n    dy: Math.abs(dy) < conf.MINMOVE ? 0 : dy,\n  }\n}\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    const target = state.pos.find(\n      (p) =>\n        dist2(p, { x: offsetX, y: offsetY, dx: 0, dy: 0 }) <\n        Math.pow(conf.RADIUS, 2)\n    )\n    if (target) {\n      target.dx += Math.random() * 10\n      target.dy += Math.random() * 10\n    }\n    console.log(offsetX, offsetY)\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nexport const step = (state: State) => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1, p2)) {\n      }\n    })\n  })\n  return {\n    ...state,\n    pos: state.pos.map(iterate(state.size)),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}