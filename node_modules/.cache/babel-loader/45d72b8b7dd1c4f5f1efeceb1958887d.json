{"ast":null,"code":"var _jsxFileName = \"/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst step = timestamp => {\n  var progress;\n  if (start === null) start = timestamp;\n  progress = timestamp - start;\n  d.style.left = Math.min(progress / 10, 200) + 'px';\n\n  if (progress < 2000) {\n    requestAnimationFrame(step);\n  }\n};\n\nrequestAnimationFrame(step);\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const ref = useRef();\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx"],"names":["useRef","step","timestamp","progress","start","d","style","left","Math","min","requestAnimationFrame","Canvas","height","width","ref"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;;;AAEA,MAAMC,IAAI,GAAIC,SAAD,IAAuB;AAClC,MAAIC,QAAJ;AACA,MAAIC,KAAK,KAAK,IAAd,EAAoBA,KAAK,GAAGF,SAAR;AACpBC,EAAAA,QAAQ,GAAGD,SAAS,GAAGE,KAAvB;AACAC,EAAAA,CAAC,CAACC,KAAF,CAAQC,IAAR,GAAeC,IAAI,CAACC,GAAL,CAASN,QAAQ,GAAG,EAApB,EAAwB,GAAxB,IAA+B,IAA9C;;AACA,MAAIA,QAAQ,GAAG,IAAf,EAAqB;AACnBO,IAAAA,qBAAqB,CAACT,IAAD,CAArB;AACD;AACF,CARD;;AAUAS,qBAAqB,CAACT,IAAD,CAArB;;AAEA,MAAMU,MAAM,GAAG,QAA4D;AAAA;;AAAA,MAA3D;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAA2D;AACzE,QAAMC,GAAG,GAAGd,MAAM,EAAlB;AACA,sBAAO;AAAcY,IAAAA,MAAd;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAHD;;GAAMH,M;;KAAAA,M;AAKN,eAAeA,MAAf","sourcesContent":["import { useRef } from 'react'\n\nconst step = (timestamp: number) => {\n  var progress\n  if (start === null) start = timestamp\n  progress = timestamp - start\n  d.style.left = Math.min(progress / 10, 200) + 'px'\n  if (progress < 2000) {\n    requestAnimationFrame(step)\n  }\n}\n\nrequestAnimationFrame(step)\n\nconst Canvas = ({ height, width }: { height?: number; width?: number }) => {\n  const ref = useRef<any>()\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}