{"ast":null,"code":"import _objectSpread from\"/Users/arthur.escriou/workspace/canvas/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import*as conf from'./conf';var iterate=function iterate(bound){return function(coord){var dx=(coord.x+conf.RADIUS>bound.width||coord.x<conf.RADIUS?-coord.dx:coord.dx)*conf.FRICTION;var dy=(coord.y+conf.RADIUS>bound.height||coord.y<conf.RADIUS?-coord.dy:coord.dy)*conf.FRICTION;return{x:coord.x+dx,y:coord.y+dy,dx:Math.abs(dx)<conf.MINMOVE?0:dx,dy:Math.abs(dy)<conf.MINMOVE?0:dy};};};export var click=function click(state){return function(event){var offsetX=event.offsetX,offsetY=event.offsetY;console.log(offsetX,offsetY);return state;};};var collide=function collide(o1,o2){return Math.abs(o1.x-o2.x)+Math.abs(o1.y-o2.y)<Math.pow(conf.RADIUS,2);};export var step=function step(state){state.pos.map(function(p1,i,arr){arr.slice(i+1).map(function(p2){if(collide(p1,p2)){}});});return _objectSpread(_objectSpread({},state),{},{pos:state.pos.map(iterate(state.size))});};","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/state.ts"],"names":["conf","iterate","bound","coord","dx","x","RADIUS","width","FRICTION","dy","y","height","Math","abs","MINMOVE","click","state","event","offsetX","offsetY","console","log","collide","o1","o2","pow","step","pos","map","p1","i","arr","slice","p2","size"],"mappings":"2HAAA,MAAO,GAAKA,CAAAA,IAAZ,KAAsB,QAAtB,CAKA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,QAAiB,UAACC,KAAD,CAAkB,CACjD,GAAMC,CAAAA,EAAE,CACN,CAACD,KAAK,CAACE,CAAN,CAAUL,IAAI,CAACM,MAAf,CAAwBJ,KAAK,CAACK,KAA9B,EAAuCJ,KAAK,CAACE,CAAN,CAAUL,IAAI,CAACM,MAAtD,CACG,CAACH,KAAK,CAACC,EADV,CAEGD,KAAK,CAACC,EAFV,EAEgBJ,IAAI,CAACQ,QAHvB,CAIA,GAAMC,CAAAA,EAAE,CACN,CAACN,KAAK,CAACO,CAAN,CAAUV,IAAI,CAACM,MAAf,CAAwBJ,KAAK,CAACS,MAA9B,EAAwCR,KAAK,CAACO,CAAN,CAAUV,IAAI,CAACM,MAAvD,CACG,CAACH,KAAK,CAACM,EADV,CAEGN,KAAK,CAACM,EAFV,EAEgBT,IAAI,CAACQ,QAHvB,CAIA,MAAO,CACLH,CAAC,CAAEF,KAAK,CAACE,CAAN,CAAUD,EADR,CAELM,CAAC,CAAEP,KAAK,CAACO,CAAN,CAAUD,EAFR,CAGLL,EAAE,CAAEQ,IAAI,CAACC,GAAL,CAAST,EAAT,EAAeJ,IAAI,CAACc,OAApB,CAA8B,CAA9B,CAAkCV,EAHjC,CAILK,EAAE,CAAEG,IAAI,CAACC,GAAL,CAASJ,EAAT,EAAeT,IAAI,CAACc,OAApB,CAA8B,CAA9B,CAAkCL,EAJjC,CAAP,CAMD,CAfe,EAAhB,CAiBA,MAAO,IAAMM,CAAAA,KAAK,CAChB,QADWA,CAAAA,KACX,CAACC,KAAD,QACA,UAACC,KAAD,CAAgC,CAC9B,GAAQC,CAAAA,OAAR,CAA6BD,KAA7B,CAAQC,OAAR,CAAiBC,OAAjB,CAA6BF,KAA7B,CAAiBE,OAAjB,CACAC,OAAO,CAACC,GAAR,CAAYH,OAAZ,CAAqBC,OAArB,EACA,MAAOH,CAAAA,KAAP,CACD,CALD,EADK,CAQP,GAAMM,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,EAAD,CAAYC,EAAZ,QACdZ,CAAAA,IAAI,CAACC,GAAL,CAASU,EAAE,CAAClB,CAAH,CAAOmB,EAAE,CAACnB,CAAnB,EAAwBO,IAAI,CAACC,GAAL,CAASU,EAAE,CAACb,CAAH,CAAOc,EAAE,CAACd,CAAnB,CAAxB,CAAgDE,IAAI,CAACa,GAAL,CAASzB,IAAI,CAACM,MAAd,CAAsB,CAAtB,CADlC,EAAhB,CAGA,MAAO,IAAMoB,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACV,KAAD,CAAkB,CACpCA,KAAK,CAACW,GAAN,CAAUC,GAAV,CAAc,SAACC,EAAD,CAAKC,CAAL,CAAQC,GAAR,CAAgB,CAC5BA,GAAG,CAACC,KAAJ,CAAUF,CAAC,CAAG,CAAd,EAAiBF,GAAjB,CAAqB,SAACK,EAAD,CAAQ,CAC3B,GAAIX,OAAO,CAACO,EAAD,CAAKI,EAAL,CAAX,CAAqB,CACpB,CACF,CAHD,EAID,CALD,EAMA,sCACKjB,KADL,MAEEW,GAAG,CAAEX,KAAK,CAACW,GAAN,CAAUC,GAAV,CAAc3B,OAAO,CAACe,KAAK,CAACkB,IAAP,CAArB,CAFP,GAID,CAXM","sourcesContent":["import * as conf from './conf'\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Size = { height: number; width: number }\nexport type State = { pos: Array<Coord>; size: Size }\n\nconst iterate = (bound: Size) => (coord: Coord) => {\n  const dx =\n    (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n      ? -coord.dx\n      : coord.dx) * conf.FRICTION\n  const dy =\n    (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n      ? -coord.dy\n      : coord.dy) * conf.FRICTION\n  return {\n    x: coord.x + dx,\n    y: coord.y + dy,\n    dx: Math.abs(dx) < conf.MINMOVE ? 0 : dx,\n    dy: Math.abs(dy) < conf.MINMOVE ? 0 : dy,\n  }\n}\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    console.log(offsetX, offsetY)\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  Math.abs(o1.x - o2.x) + Math.abs(o1.y - o2.y) < Math.pow(conf.RADIUS, 2)\n\nexport const step = (state: State) => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1, p2)) {\n      }\n    })\n  })\n  return {\n    ...state,\n    pos: state.pos.map(iterate(state.size)),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}