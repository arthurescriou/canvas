{"ast":null,"code":"import * as conf from './conf';\n\nconst toDoubleHexa = n => n < 16 ? '0' + n.toString(16) : n.toString(16);\n\nexport const rgbaTorgb = function (rgb) {\n  let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1];\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2];\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3];\n    r = parseInt(hexR, 16);\n    g = parseInt(hexG, 16);\n    b = parseInt(hexB, 16);\n  }\n\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '');\n    const splitted = val.split(',');\n    r = parseInt(splitted[0]);\n    g = parseInt(splitted[1]);\n    b = parseInt(splitted[2]);\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255, 255)), 0);\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255, 255)), 0);\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255, 255)), 0);\n  return '#' + toDoubleHexa(r) + toDoubleHexa(g) + toDoubleHexa(b);\n};\n\nconst generateColor = (base, declination, max) => {};\n\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = ctx.canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\n\nconst drawCirle = (ctx, color) => _ref => {\n  let {\n    x,\n    y\n  } = _ref;\n  ctx.beginPath();\n  ctx.fillStyle = color !== null && color !== void 0 ? color : 'red';\n  ctx.arc(x, y, conf.RADIUS, 0, 2 * Math.PI);\n  ctx.fill();\n};\n\nexport const render = ctx => state => {\n  clear(ctx);\n  ctx.font = '96px arial';\n  ctx.strokeText(`life ${state.player.life}`, 20, 100);\n  state.pos.map(b => b.coord).map(drawCirle(ctx));\n  drawCirle(ctx, 'blue')(state.player.coord);\n\n  if (state.endOfGame) {\n    const text = state.pos.length > 0 ? 'YOU LOSE' : 'YOU WIN';\n    ctx.font = '48px';\n    ctx.strokeText(text, state.size.width / 2 - 200, state.size.height / 2);\n  }\n};","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/renderer.ts"],"names":["conf","toDoubleHexa","n","toString","rgbaTorgb","rgb","alpha","r","g","b","startsWith","hexR","length","slice","hexG","hexB","parseInt","val","replace","splitted","split","Math","max","min","floor","generateColor","base","declination","clear","ctx","height","width","canvas","fillStyle","fillRect","drawCirle","color","x","y","beginPath","arc","RADIUS","PI","fill","render","state","font","strokeText","player","life","pos","map","coord","endOfGame","text","size"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { State } from './state'\n\nconst toDoubleHexa = (n) => (n < 16 ? '0' + n.toString(16) : n.toString(16))\n\nexport const rgbaTorgb = (rgb: string, alpha = 0) => {\n  let r = 0\n  let g = 0\n  let b = 0\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1]\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2]\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3]\n    r = parseInt(hexR, 16)\n    g = parseInt(hexG, 16)\n    b = parseInt(hexB, 16)\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '')\n    const splitted = val.split(',')\n    r = parseInt(splitted[0])\n    g = parseInt(splitted[1])\n    b = parseInt(splitted[2])\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255, 255)), 0)\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255, 255)), 0)\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255, 255)), 0)\n\n  return '#' + toDoubleHexa(r) + toDoubleHexa(g) + toDoubleHexa(b)\n}\n\nconst generateColor = (base: string, declination: number, max: number) => {}\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = ctx.canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n\nconst drawCirle =\n  (ctx: CanvasRenderingContext2D, color?: string) =>\n  ({ x, y }: { x: number; y: number }) => {\n    ctx.beginPath()\n    ctx.fillStyle = color ?? 'red'\n    ctx.arc(x, y, conf.RADIUS, 0, 2 * Math.PI)\n    ctx.fill()\n  }\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  clear(ctx)\n  ctx.font = '96px arial'\n  ctx.strokeText(`life ${state.player.life}`, 20, 100)\n  state.pos.map((b) => b.coord).map(drawCirle(ctx))\n  drawCirle(ctx, 'blue')(state.player.coord)\n  if (state.endOfGame) {\n    const text = state.pos.length > 0 ? 'YOU LOSE' : 'YOU WIN'\n    ctx.font = '48px'\n    ctx.strokeText(text, state.size.width / 2 - 200, state.size.height / 2)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}