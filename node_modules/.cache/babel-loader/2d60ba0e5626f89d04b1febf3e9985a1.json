{"ast":null,"code":"var _jsxFileName = \"/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  pos: {\n    x: 123,\n    y: 123\n  }\n};\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(iterate(ctx));\n};\n\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = ctx.canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\n\nconst step = state => ({\n  pos: {\n    x: state.pos.x + 1,\n    y: state.pos.y + 1\n  }\n});\n\nconst drawCirle = _ref => {\n  let {\n    x,\n    y\n  } = _ref;\n  return ctx => {\n    ctx.beginPath();\n    ctx.fillStyle = 'red';\n    ctx.arc(x, y, 50, 0, 2 * Math.PI);\n    ctx.stroke();\n  };\n};\n\nconst render = ctx => state => {\n  clear(ctx);\n  drawCirle(state.pos)(ctx);\n};\n\nconst Canvas = _ref2 => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref2;\n  const ref = useRef();\n  const state = useRef(initialState);\n\n  const iterate = ctx => {\n    state.current = step(state.current);\n    render(ctx)(state.current);\n  };\n\n  useEffect(() => {\n    if (ref.current) initCanvas(iterate)(ref.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"Gpm0P4FfDB25XYapIJctmdb7SaA=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/arthur.escriou/workspace/canvas/src/components/canvas/index.tsx"],"names":["useRef","useEffect","initialState","pos","x","y","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","clear","height","width","fillStyle","fillRect","step","state","drawCirle","beginPath","arc","Math","PI","stroke","render","Canvas","ref","current"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;AAGA,MAAMC,YAAmB,GAAG;AAAEC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAAP,CAA5B;;AAEA,MAAMC,UAAU,GACbC,OAAD,IACCC,MAAD,IAA+B;AAC7B,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAI,CAACD,GAAL,EAAU;AACVE,EAAAA,qBAAqB,CAACJ,OAAO,CAACE,GAAD,CAAR,CAArB;AACD,CANH;;AAQA,MAAMG,KAAK,GAAIH,GAAD,IAAmC;AAC/C,QAAM;AAAEI,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBL,GAAG,CAACD,MAA9B;AACAC,EAAAA,GAAG,CAACM,SAAJ,GAAgB,OAAhB;AACAN,EAAAA,GAAG,CAACO,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBF,KAAnB,EAA0BD,MAA1B;AACD,CAJD;;AAMA,MAAMI,IAAI,GAAIC,KAAD,KAAmB;AAC9Bf,EAAAA,GAAG,EAAE;AAAEC,IAAAA,CAAC,EAAEc,KAAK,CAACf,GAAN,CAAUC,CAAV,GAAc,CAAnB;AAAsBC,IAAAA,CAAC,EAAEa,KAAK,CAACf,GAAN,CAAUE,CAAV,GAAc;AAAvC;AADyB,CAAnB,CAAb;;AAIA,MAAMc,SAAS,GACb;AAAA,MAAC;AAAEf,IAAAA,CAAF;AAAKC,IAAAA;AAAL,GAAD;AAAA,SACCI,GAAD,IAAmC;AACjCA,IAAAA,GAAG,CAACW,SAAJ;AACAX,IAAAA,GAAG,CAACM,SAAJ,GAAgB,KAAhB;AACAN,IAAAA,GAAG,CAACY,GAAJ,CAAQjB,CAAR,EAAWC,CAAX,EAAc,EAAd,EAAkB,CAAlB,EAAqB,IAAIiB,IAAI,CAACC,EAA9B;AACAd,IAAAA,GAAG,CAACe,MAAJ;AACD,GAND;AAAA,CADF;;AASA,MAAMC,MAAM,GAAIhB,GAAD,IAAoCS,KAAD,IAAkB;AAClEN,EAAAA,KAAK,CAACH,GAAD,CAAL;AACAU,EAAAA,SAAS,CAACD,KAAK,CAACf,GAAP,CAAT,CAAqBM,GAArB;AACD,CAHD;;AAKA,MAAMiB,MAAM,GAAG,SAA4D;AAAA;;AAAA,MAA3D;AAAEb,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAA2D;AACzE,QAAMa,GAAG,GAAG3B,MAAM,EAAlB;AACA,QAAMkB,KAAK,GAAGlB,MAAM,CAAQE,YAAR,CAApB;;AACA,QAAMK,OAAO,GAAIE,GAAD,IAAmC;AACjDS,IAAAA,KAAK,CAACU,OAAN,GAAgBX,IAAI,CAACC,KAAK,CAACU,OAAP,CAApB;AACAH,IAAAA,MAAM,CAAChB,GAAD,CAAN,CAAYS,KAAK,CAACU,OAAlB;AACD,GAHD;;AAIA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,GAAG,CAACC,OAAR,EAAiBtB,UAAU,CAACC,OAAD,CAAV,CAAoBoB,GAAG,CAACC,OAAxB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAGA,sBAAO;AAAcf,IAAAA,MAAd;AAAsBC,IAAAA,KAAtB;AAA6Ba,IAAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAXD;;GAAMD,M;;KAAAA,M;AAaN,eAAeA,MAAf","sourcesContent":["import { useRef, useEffect } from 'react'\n\ntype State = { pos: { x: number; y: number } }\nconst initialState: State = { pos: { x: 123, y: 123 } }\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(iterate(ctx))\n  }\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = ctx.canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n\nconst step = (state: State) => ({\n  pos: { x: state.pos.x + 1, y: state.pos.y + 1 },\n})\n\nconst drawCirle =\n  ({ x, y }: { x: number; y: number }) =>\n  (ctx: CanvasRenderingContext2D) => {\n    ctx.beginPath()\n    ctx.fillStyle = 'red'\n    ctx.arc(x, y, 50, 0, 2 * Math.PI)\n    ctx.stroke()\n  }\n\nconst render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  clear(ctx)\n  drawCirle(state.pos)(ctx)\n}\n\nconst Canvas = ({ height, width }: { height?: number; width?: number }) => {\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    state.current = step(state.current)\n    render(ctx)(state.current)\n  }\n  useEffect(() => {\n    if (ref.current) initCanvas(iterate)(ref.current)\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}